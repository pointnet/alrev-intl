//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Script: {{script}}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.PluralRules;
using Alrev.Intl.PluralRules.Globalization;
using System;
using System.Globalization;
using System.Threading;
using Xunit;

namespace {{namespace}}
{
    public class {{classPrefix}}PluralRules{{type}}ResourceTests
    {
        [Fact]
        public void PluralRulesType_ShouldReturn_PluralRulesValues{{type}}()
        {
            CultureInfo culture = new CultureInfo("{{locale}}");
            PluralRules{{type}}Localizer localizer = new PluralRules{{type}}Localizer();
            IPluralRulesResource resource = localizer.GetLocalizer(culture);
            Assert.Equal(PluralRulesTypeValues.{{type}}, resource.PluralRulesType);
        }

        [Fact]
        public void EvaluateWithNullPluralRulesContext_ShouldThrow_ArgumentNullExpection()
        {
            CultureInfo culture = new CultureInfo("{{locale}}");
            PluralRules{{type}}Localizer localizer = new PluralRules{{type}}Localizer();
            IPluralRulesResource resource = localizer.GetLocalizer(culture);
            Exception ex = Record.Exception(() => resource.Evaluate(null));
            Assert.IsType<ArgumentNullException>(ex);
        }

        [Theory]
{{#each examples}}
    {{#each this}}
        [InlineData("{{this}}", {{formatPluralValues @key}})]
    {{/each}}
{{/each}}
        public void Evaluate_ShouldReturn_ExpectedPluralRulesValues(string input, PluralRulesValues expected)
        {
            CultureInfo culture = new CultureInfo("{{locale}}");
            PluralRules{{type}}Localizer localizer = new PluralRules{{type}}Localizer();
            IPluralRulesResource resource = localizer.GetLocalizer(culture);
            PluralRulesValues result = resource.Evaluate(PluralRulesContext.Create(input));
            Assert.Equal(expected, result);
        }
    }
}