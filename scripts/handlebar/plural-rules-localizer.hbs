//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Script: {{script}}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.PluralRules;
using Alrev.Intl.PluralRules.Resources.{{type}}s;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;

namespace {{namespace}}
{
    // https://unicode-org.github.io/cldr-staging/charts/39/supplemental/language_plural_rules.html
    public class PluralRules{{type}}Localizer : ReadOnlyDictionary<string, IPluralRulesResource>, IResourceSetLocalizer<IPluralRulesResource>
    {
        private PluralRules{{type}}Localizer(IDictionary<string, IPluralRulesResource> dictionary) : base(dictionary) { }

        public PluralRules{{type}}Localizer() : this(new Dictionary<string, IPluralRulesResource>
        {
{{#each cultures}}
            { "{{@key}}", new {{this}}PluralRules{{../type}}Resource() }{{#unless @last}},{{/unless}}
{{/each}}
        })
        { }

        public IPluralRulesResource CurrentLocalizer => this.GetLocalizer(CultureInfo.CurrentCulture);

        public IPluralRulesResource CurrentUILocalizer => this.GetLocalizer(CultureInfo.CurrentUICulture);

        public IPluralRulesResource GetLocalizer(CultureInfo culture) => culture switch 
        {
            null => throw new ArgumentNullException(nameof(culture)),
            _ => this.GetValueOrDefault(culture.Name, null) ?? this.GetValueOrDefault(culture.Parent?.Name, null)
        };
    }
}