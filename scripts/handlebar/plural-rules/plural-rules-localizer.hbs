//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Script: {{script}}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.PluralRules;
using Alrev.Intl.PluralRules.Resources.{{type}}s;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;

namespace {{namespace}}
{
    /// <summary>
    /// The {{type}} plural rules localizer
    /// </summary>
    public class PluralRules{{type}}Localizer : ReadOnlyDictionary<string, IPluralRulesResource>, IResourceSetLocalizer<IPluralRulesResource>
    {
        private PluralRules{{type}}Localizer(IDictionary<string, IPluralRulesResource> dictionary) : base(dictionary) { }
    
        /// <summary>
        /// The class constructor
        /// </summary>
        public PluralRules{{type}}Localizer() : this(new Dictionary<string, IPluralRulesResource>
        {
{{#each cultures}}
            { "{{@key}}", new {{this}}PluralRules{{../type}}Resource() }{{#unless @last}},{{/unless}}
{{/each}}
        })
        { }
    
        /// <summary>
        /// Gets the <see cref="IPluralRulesResource"/> for the specified <see cref="CultureInfo"/>
        /// </summary>
        /// <param name="culture">The <see cref="CultureInfo"/></param>
        /// <returns>An <see cref="IPluralRulesResource"/> for the specified <see cref="CultureInfo"/> or null</returns>
        /// <remarks>
        /// If the specified <see cref="CultureInfo"/> does not exists, it will try to use the parent <see cref="CultureInfo"/> of the specified one.
        /// </remarks>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public IPluralRulesResource GetLocalizer(CultureInfo culture) => culture switch 
        {
            null => throw new ArgumentNullException("CultureInfo must not be null", nameof(culture)),
            CultureInfo c when string.IsNullOrEmpty(c.Name) => throw new ArgumentException("CultureInfo.InvariantCulture is not supported", nameof(culture)),
            _ => this.GetValueOrDefault(culture.Name, null) ?? this.GetValueOrDefault(culture.Parent.Name, null)
        };
    }
}