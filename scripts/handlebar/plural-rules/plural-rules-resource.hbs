{{> autoGenerated script}}
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.PluralRules;
using System;
using System.Globalization;
using System.Linq;

namespace {{namespace}}
{
	/// <summary>
	/// Plural Rules {{pluralType}} resources for '{{englishName}}' [{{locale}}]
	/// </summary>
	/// <seealso href="https://unicode-org.github.io/cldr-staging/charts/39/supplemental/language_plural_rules.html#{{locale}}"/>
	public class {{className}}Resource : IPluralRules{{pluralType}}Resource
	{
		/// <summary>
		/// The <see cref="IIntlResource"/> culture
		/// </summary>
		public CultureInfo Culture { get; }

		/// <summary>
		/// The class constructor
		/// </summary>
		public {{className}}Resource()
		{
			this.Culture = new CultureInfo("{{locale}}");
		}

		/// <summary>
		/// Evaluates an <see cref="IPluralRulesContext"/> against the '{{englishName}}' [{{locale}}] <see cref="IPluralRules{{pluralType}}Resource"/>
		/// </summary>
		/// <param name="context">An <see cref="IPluralRulesContext"/></param>
		/// <returns>The <see cref="PluralRulesValues"/> of the <see cref="IPluralRulesContext"/></returns>
		/// <remarks>
{{#each resources}}
		/// {{@key}} - {{this}}
{{/each}}
		/// </remarks>
		/// <exception cref="ArgumentNullException"></exception>
		public PluralRulesValues Evaluate(IPluralRulesContext context) => context switch
		{
			null => throw new ArgumentNullException(nameof(context), "IPluralRulesContext is null"),
{{#each resources}}
			{{{formatRule @key this}}}
{{/each}}
		};
	}
}