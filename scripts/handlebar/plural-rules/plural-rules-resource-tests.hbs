{{> autoGenerated script}}
using Alrev.Intl.Abstractions.PluralRules;
using Alrev.Intl.PluralRules.Tests.Fixtures;
using System;
using System.Globalization;
using Xunit;

namespace {{namespace}}
{
	[Collection("{{fixtureName}}ResourceLocalizer")]
	public class {{className}}ResourceTests
	{
		private {{fixtureName}}ResourceLocalizerFixture Fixture { get; }

		public {{className}}ResourceTests({{fixtureName}}ResourceLocalizerFixture fixture)	
		{
			this.Fixture = fixture;
		}

		[Fact]
		public void EvaluateWithNullPluralRulesContext_ShouldThrow_ArgumentNullExpection()
		{
			CultureInfo culture = new CultureInfo("{{locale}}");
			IPluralRulesResource resource = this.Fixture.Localizer.ResolveResource(culture);
			Exception ex = Record.Exception(() => resource.Evaluate(null));
			Assert.IsType<ArgumentNullException>(ex);
		}

		[Theory]
{{#each examples}}
    {{#each this}}
		[InlineData("{{this}}", {{formatPluralValues @key}})]
    {{/each}}
{{/each}}
		public void Evaluate_ShouldReturn_ExpectedPluralRulesValues(string input, PluralRulesValues expected)
		{
			CultureInfo culture = new CultureInfo("{{locale}}");
			IPluralRulesResource resource = this.Fixture.Localizer.ResolveResource(culture);
			PluralRulesValues result = resource.Evaluate(PluralRulesContext.Create(input));
			Assert.Equal(expected, result);	
		}
	}
}