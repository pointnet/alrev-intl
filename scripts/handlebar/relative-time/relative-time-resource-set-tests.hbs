//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Script: {{script}}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.RelativeTime;
using System;
using System.Globalization;
using Xunit;


namespace {{namespace}}.Tests.Resources
{
    [Collection("RelativeTimeLocalizer")]
    public class {{classPrefix}}RelativeTimeResourceSetTests
    {
        private RelativeTimeLocalizerFixture fixture;

        public {{classPrefix}}RelativeTimeResourceSetTests(RelativeTimeLocalizerFixture fixture)
        {
            this.fixture = fixture;
        }

        [Fact]
        public void UnknownRelativeTimeUnit_ShouldThrow_NotImplementedException()
        {
            IRelativeTimeResourceSet resourceSet = this.fixture.Localizer.GetLocalizer(new CultureInfo("{{locale}}"));
            Exception ex = Record.Exception(() => resourceSet.GetRelativeTimeStylesResource(RelativeTimeUnitValues.Unknown));
            Assert.IsType<NotImplementedException>(ex);
        }

        [Theory]
{{#each relativeTimes}}
        [InlineData(RelativeTimeUnitValues.{{@key}})]
{{/each}}
        public void UnknownRelativeTimeStyle_ShouldThrow_NotImplementedException(RelativeTimeUnitValues unit)
        {
            IRelativeTimeResourceSet resourceSet = this.fixture.Localizer.GetLocalizer(new CultureInfo("{{locale}}"));
            IRelativeTimeStylesResource resourceStyles = resourceSet.GetRelativeTimeStylesResource(unit);
            Exception ex = Record.Exception(() => resourceStyles.GetRelativeTimeResource(RelativeTimeStyleValues.Unknown));
            Assert.IsType<NotImplementedException>(ex);
        }

        [Theory]
{{#each relativeTimes}}
    {{#with this/long}}
        [InlineData(RelativeTimeUnitValues.{{@key}}, {{Type}}, {{#if DisplayName}}"{{{DisplayName}}}"{{else}}null{{/if}}, {{{formatDictionaryCount Current}}}, {{{formatDictionaryCount Past}}}, {{{formatDictionaryCount Future}}})]
    {{/with}}
    {{#with this/narrow}}
        [InlineData(RelativeTimeUnitValues.{{@key}}, {{Type}}, {{#if DisplayName}}"{{{DisplayName}}}"{{else}}null{{/if}}, {{{formatDictionaryCount Current}}}, {{{formatDictionaryCount Past}}}, {{{formatDictionaryCount Future}}})]
    {{/with}}
    {{#with this/short}}
        [InlineData(RelativeTimeUnitValues.{{@key}}, {{Type}}, {{#if DisplayName}}"{{{DisplayName}}}"{{else}}null{{/if}}, {{{formatDictionaryCount Current}}}, {{{formatDictionaryCount Past}}}, {{{formatDictionaryCount Future}}})]
    {{/with}}
{{/each}}
        public void SpecificUnitAndStyle_ShouldReturn_ExpectedDisplayName(RelativeTimeUnitValues unit, RelativeTimeStyleValues style, string displayName, int current, int past, int future)
        {
            IRelativeTimeResourceSet resourceSet = this.fixture.Localizer.GetLocalizer(new CultureInfo("{{locale}}"));
            IRelativeTimeStylesResource resourceStyles = resourceSet.GetRelativeTimeStylesResource(unit);
            IRelativeTimeResource resource = resourceStyles.GetRelativeTimeResource(style);
            Assert.Equal("{{locale}}", (resource as IResource).Locale);
            Assert.Equal(unit, resource.RelativeTimeUnit);
            Assert.Equal(style, resource.RelativeTimeStyle);
            Assert.Equal(displayName, resource.DisplayName);
            Assert.Equal(current, resource.Count);
            Assert.Equal(past, resource.Past.Count);
            Assert.Equal(future, resource.Future.Count);
        }
    }
}