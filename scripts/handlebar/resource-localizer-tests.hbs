{{> autoGenerated script}}
using Alrev.Intl.Abstractions;
using {{resourceNamespace}};
using {{fixtureNamespace}};
using System;
using System.Globalization;
using Xunit;

namespace {{namespace}}
{
	[Collection("{{className}}ResourceLocalizer")]
	public class {{className}}ResourceLocalizerTests
	{
		public {{className}}ResourceLocalizerFixture Fixture { get; }

		public {{className}}ResourceLocalizerTests({{className}}ResourceLocalizerFixture fixture)
		{
			this.Fixture = fixture;
		}

		[Fact]
		public void ResolveResourceWithNullCultureInfo_ShouldThrow_ArgumentNullExpection()
		{
			Exception ex = Record.Exception(() => this.Fixture.Localizer.ResolveResource(null));
			Assert.IsType<ArgumentNullException>(ex);
		}

		[Fact]
		public void IsSupportedWithNullCultureInfo_ShouldThrow_ArgumentNullExpection()
		{
			Exception ex = Record.Exception(() => this.Fixture.Localizer.IsSupported(null));
			Assert.IsType<ArgumentNullException>(ex);
		}

		[Theory]
{{#each nulls}}
		[InlineData("{{this}}")]
{{/each}}
		public void NotSupportedCultureInfo_ShouldReturn_Null(string locale)
		{
			{{resourceType}} resource = this.Fixture.Localizer.ResolveResource(new CultureInfo(locale));
			Assert.Null(resource);
		}

		[Theory]
{{#each others}}
		[InlineData("{{@key}}", "{{this}}")]
{{/each}}
		public void SupportedCultureInfo_ShouldReturn_ExpectedLocale(string locale, string expected)
		{
			{{resourceType}} resource = this.Fixture.Localizer.ResolveResource(new CultureInfo(locale));
			Assert.Equal(expected, resource.Culture.Name.ToLowerInvariant());
		}

		[Theory]
{{#each nulls}}
		[InlineData("{{this}}", false)]
{{/each}}
{{#each others}}
		[InlineData("{{@key}}", true)]
{{/each}}
		public void IsSupported_ShouldReturn_ExpectedValue(string locale, bool expected)
		{
			bool supported = this.Fixture.Localizer.IsSupported(new CultureInfo(locale));
			Assert.Equal(expected, supported);
		}
	}
}