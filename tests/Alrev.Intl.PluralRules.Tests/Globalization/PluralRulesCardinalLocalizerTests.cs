//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Script: ./scripts/cldr-plural-rules.csx
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.PluralRules;
using System;
using System.Globalization;
using Xunit;

namespace Alrev.Intl.PluralRules.Tests.Globalization
{
    [Collection("PluralRulesLocalizers")]
    public class PluralRulesCardinalLocalizerTests
    {
        private PluralRulesLocalizersFixture fixture;

        public PluralRulesCardinalLocalizerTests(PluralRulesLocalizersFixture fixture)
        {
            this.fixture = fixture;
        }

        [Fact]
        public void GetLocalizerWithNullCultureInfo_ShouldThrow_ArgumentNullExpection()
        {
            Exception ex = Record.Exception(() => this.fixture.CardinalLocalizer.GetLocalizer(null));
            Assert.IsType<ArgumentNullException>(ex);
        }

        [Fact]
        public void GetLocalizerWithInvariantCultureInfo_ShouldThrow_ArgumentExpection()
        {
            Exception ex = Record.Exception(() => this.fixture.CardinalLocalizer.GetLocalizer(CultureInfo.InvariantCulture));
            Assert.IsType<ArgumentException>(ex);
        }

        [Fact]
        public void GetLocalizerWithUnknownCultureInfo_ShouldReturn_Null()
        {
            IPluralRulesResource resource = this.fixture.CardinalLocalizer.GetLocalizer(new CultureInfo("aa"));
            Assert.Null(resource);
        }

        [Fact]
        public void GetLocalizerWithUnknownChildrenCultureInfo_ShouldReturn_Null()
        {
            IPluralRulesResource resource = this.fixture.CardinalLocalizer.GetLocalizer(new CultureInfo("aa-DJ"));
            Assert.Null(resource);
        }

        [Fact]
        public void GetLocalizerWithCultureInfo_ShouldReturn_IPluralRulesResource()
        {
            IPluralRulesResource resource = this.fixture.CardinalLocalizer.GetLocalizer(new CultureInfo("en"));
            Assert.Equal("en", (resource as IResource).Locale);
        }

        [Fact]
        public void GetLocalizerWithChildrenCultureInfo_ShouldReturn_ParentIPluralRulesResource()
        {
            IPluralRulesResource resource = this.fixture.CardinalLocalizer.GetLocalizer(new CultureInfo("en-US"));
            Assert.Equal("en", (resource as IResource).Locale);
        }

        [Fact]
        public void IsSupportedWithNullCultureInfo_ShouldThrow_ArgumentNullExpection()
        {
            Exception ex = Record.Exception(() => this.fixture.CardinalLocalizer.IsSupported(null));
            Assert.IsType<ArgumentNullException>(ex);
        }

        [Fact]
        public void IsSupportedWithInvariantCultureInfo_ShouldReturn_False()
        {
            bool supported = this.fixture.CardinalLocalizer.IsSupported(new CultureInfo("aa"));
            Assert.False(supported);
        }

        [Fact]
        public void IsSupportedWithUnknownCultureInfo_ShouldReturn_False()
        {
            bool supported = this.fixture.CardinalLocalizer.IsSupported(new CultureInfo("aa"));
            Assert.False(supported);
        }

        [Fact]
        public void IsSupportedWithUnknownChildrenCultureInfo_ShouldReturn_False()
        {
            bool supported = this.fixture.CardinalLocalizer.IsSupported(new CultureInfo("aa-DJ"));
            Assert.False(supported);
        }

        [Fact]
        public void IsSupportedWithCultureInfo_ShouldReturn_True()
        {
            bool supported = this.fixture.CardinalLocalizer.IsSupported(new CultureInfo("en"));
            Assert.True(supported);
        }

        [Fact]
        public void IsSupportedWithChildrenCultureInfo_ShouldReturn_True()
        {
            bool supported = this.fixture.CardinalLocalizer.IsSupported(new CultureInfo("en-US"));
            Assert.True(supported);
        }
    }
}