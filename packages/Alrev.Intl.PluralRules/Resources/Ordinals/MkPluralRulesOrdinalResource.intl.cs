// --------------------------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Script: ./scripts/cldr-plural-rules.csx
//
//   Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------------------------------
using Alrev.Intl.Abstractions;
using Alrev.Intl.Abstractions.PluralRules;
using System;
using System.Globalization;
using System.Linq;

namespace Alrev.Intl.PluralRules.Resources.Ordinals
{
	/// <summary>
	/// Plural Rules Ordinal resources for 'Macedonian' [mk]
	/// </summary>
	/// <seealso href="https://unicode-org.github.io/cldr-staging/charts/39/supplemental/language_plural_rules.html#mk"/>
	public class MkPluralRulesOrdinalResource : IPluralRulesOrdinalResource
	{
		/// <summary>
		/// The <see cref="IIntlResource"/> culture
		/// </summary>
		public CultureInfo Culture { get; }

		/// <summary>
		/// The class constructor
		/// </summary>
		public MkPluralRulesOrdinalResource()
		{
			this.Culture = new CultureInfo("mk");
		}

		/// <summary>
		/// Evaluates an <see cref="IPluralRulesContext"/> against the 'Macedonian' [mk] <see cref="IPluralRulesOrdinalResource"/>
		/// </summary>
		/// <param name="context">An <see cref="IPluralRulesContext"/></param>
		/// <returns>The <see cref="PluralRulesValues"/> of the <see cref="IPluralRulesContext"/></returns>
		/// <remarks>
		/// one - i % 10 = 1 and i % 100 != 11
		/// two - i % 10 = 2 and i % 100 != 12
		/// many - i % 10 = 7,8 and i % 100 != 17,18
		/// other - 
		/// </remarks>
		/// <exception cref="ArgumentNullException"></exception>
		public PluralRulesValues Evaluate(IPluralRulesContext context) => context switch
		{
			null => throw new ArgumentNullException(nameof(context), "IPluralRulesContext is null"),
			IPluralRulesContext prc when prc.i % 10 == 1 && prc.i % 100 != 11 => PluralRulesValues.One,
			IPluralRulesContext prc when prc.i % 10 == 2 && prc.i % 100 != 12 => PluralRulesValues.Two,
			IPluralRulesContext prc when (prc.i % 10).In(7, 8) && (prc.i % 100).NotIn(17, 18) => PluralRulesValues.Many,
			_ => PluralRulesValues.Other
		};
	}
}